ext.publishCommon = {
    pom.withXml {
        def dependenciesNode = asNode().appendNode("dependencies")

        // List all compile dependencies and write to POM
        configurations.implementation.getAllDependencies().each { Dependency dep ->
            if (dep.group == null || dep.version == null || dep.group == "unspecified" || dep.version == "unspecified" || dep.name == null || dep.name == "unspecified")
                return // ignore invalid dependencies

            def dependencyNode = dependenciesNode.appendNode("dependency")
            dependencyNode.appendNode("groupId", dep.group)
            dependencyNode.appendNode("artifactId", dep.name)
            dependencyNode.appendNode("version", dep.version)

            if (!dep.transitive) {
                // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                def exclusionNode = dependencyNode.appendNode("exclusions").appendNode("exclusion")
                exclusionNode.appendNode("groupId", "*")
                exclusionNode.appendNode("artifactId", "*")
            } else if (!dep.properties.excludeRules.empty) {
                // Otherwise add specified exclude rules
                def exclusionsNode = dependencyNode.appendNode("exclusions")
                dep.properties.excludeRules.each { ExcludeRule rule ->
                    def exclusionNode = exclusionsNode.appendNode("exclusion")
                    exclusionNode.appendNode("groupId", rule.group ?: "*")
                    exclusionNode.appendNode("artifactId", rule.module ?: "*")
                }
            }
        }
        // add modules dependencies
        Node pomNode = asNode()
        all_dependencies.each { Dependency dep ->
            if (!pomNode.dependencies.contains(dep.name)) {
                def dependencyNode = pomNode.dependencies.first().appendNode("dependency")
                dependencyNode.appendNode("groupId", dep.group)
                dependencyNode.appendNode("artifactId", dep.name)
                dependencyNode.appendNode("version", dep.version)
            }
        }
        def processed = []
        // remove invalid dependencies and duplicates
        pomNode.dependencies.'*'.each() {
            if (it.groupId == null ||
                    it.groupId.text() == rootProject.name ||
                    it.groupId.text() == "unspecified" ||
                    it.artifactId == null ||
                    it.artifactId.text() == "unspecified") {
                it.parent().remove(it)
            } else if (processed.contains(it.groupId.text() + ":" + it.artifactId.text())) {
                it.parent().remove(it)
            } else {
                processed += it.groupId.text() + ":" + it.artifactId.text()
            }
        }
    }
}